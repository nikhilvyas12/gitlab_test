GIT CHEATSHEET

Basics
Life cycle of file :- 
untracked (new file or edited file)--> unmodified(will go to unmodified) ---> modified(if you change anything after commit it come in modified) --> staged (if you again do git add . it comes here)

untracked -git add .-> staged -- git commit-> unmodified area - add anything-> Modified --git commit -> staged

_____________________________ _____________________________

git workflow :- 
local(working directory) -git add .-> staging area(when you add the file) --> .git -->remote

git commit create versions(snapshots) in .git repositories.

____________________________________________________________
Configure Git for the Current Repository:
git config user.name "New Author Name"
git config user.email "new.author@example.com"
git config -l --> To check the current configuration, use:


Add and Commit :- 

for adding the files to staging area -- > git add .
-m -- for meeage ... usage git commit -m "some message".
git -a -m "commit message" --> skiiping the staging area.


Logs:- 
git log --> give details of all the previous commits .
git log --oneline

Delete :-
rm -rf .git (dont you will loose your local git)

Difference :-
git diff --> give you difference from current to staged area without adding.
git diff --staged  --> staged that will go into the staged after adding to check.


.gitignore file -->
you can ignore the files , folder make entry in it .

Move and remove file in git .
git rm filename.txt 
forcefully remove git rm -f filename.txt
git mv filename.txt newfilename.txt


Untracking file
add file inside .gitignore
git rm --cached filename  -- remove from traking

Unstaging and unmodifying files
git restore --staged filename.txt -- restore from staged area to untracked
git checkout --filename.txt -- you can go to previous version (rollback) or commit /dicard all changes in file
git checkout -f rollback all the files to last commit or last version

Alias set 
git config --global alias.st(your alias) status(actual command)
eg :- git config --global alias.unstage 'restore --staged --' --> git unstage file.txt

Branching:-
diverging fromt the main branch.
lightwighth movable pointer.
Why branching is required.

Create branches
HEAD --> it is a pointer which shows the latest comment
git branch -- to check current branch 
git branch -v  branch and last commit


git branch develop  -- to create branch
*branchName is the current or active branch

change to different branch
git checkout branchname --> change the branch
git chekout -b branchname --> create and move to branch immediately
git log --oneline --graph --all --- show all branches in graph format 
git log --oneline -- show all branches and logs

Delete the branch
git branch -d branchname
git branch -D branchName --forcefull

Merge the branch 
git merge branchname --> first go to the branch where you want to merge and use the command

3way merging
* you have one common ancestor and both branches will get meged after that .

merge conflict 
resolve the conflict and then add the file and commit it 

Rebasing**
rebasing means deleting the commits from other branch and putting it at the end .

for this you need to go to the branch from where you need to do the rebase to branch on which you need to do the rebase.
Eg:- git checkout experiment
git rebase develop
advantages of rebasing 
rebasing makes the log history looks linear and clearer , mainly use it in opensource projects
** when not using rebasing
do not rebase commits that exists outside your repository and that people may have based work on .
because when you rebase stuff you are abandoning existing commits and creating new ones that are similar but different
if some other collaborator working with you and created an branch based on the commit of one of your change , dont rebase

Merge Vs rebase
commit history is a record of what actually happened  or story of how your project was made

Merge -- keeps records of all the thing

rebase -- clear commits looks linears .  **only rebase in local branches dont do it in remote.

GIT
for creating and pushing the new and existing project follow github 

git pull --to pull the updates from remote
git push -- to push to remote
git remote -- to check the remote 
git remote -v -- > to check the remote pull and fetch 

origin is the github url --> https://github.com/yourrepo.git
git push -U(upstream) origin master --git push -U origin master

git remote add my-remote https://github.com/yourrepo.git


