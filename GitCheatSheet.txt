GIT CHEATSHEET

Basics
Life cycle of file :- 
untracked (new file or edited file)--> unmodified(will go to unmodified) ---> modified(if you change anything after commit it come in modified) --> staged (if you again do git add . it comes here)

untracked -git add .-> staged -- git commit-> unmodified area - add anything-> Modified --git commit -> staged

_____________________________ _____________________________

git workflow :- 
local(working directory) -git add .-> staging area(when you add the file) --> .git -->remote

git commit create versions(snapshots) in .git repositories.

____________________________________________________________
Configure Git for the Current Repository:
git config user.name "New Author Name"
git config user.email "new.author@example.com"
git config -l --> To check the current configuration, use:


Add and Commit :- 

for adding the files to staging area -- > git add .
-m -- for meeage ... usage git commit -m "some message".
git -a -m "commit message" --> skiiping the staging area. or git -am "your message"


Logs:- 
git log --> give details of all the previous commits .
git log --oneline

Delete :-
rm -rf .git (dont you will loose your local git)

Difference :-
git diff --> give you difference from current to staged area without adding.
git diff --staged  --> staged that will go into the staged after adding to check.


.gitignore file -->
you can ignore the files , folder make entry in it .

Move and remove file in git .
git rm filename.txt 
forcefully remove git rm -f filename.txt
git mv filename.txt newfilename.txt


Untracking file
add any file inside .gitignore
git rm --cached filename  -- remove from traking

Unstaging and unmodifying files
git restore --staged filename.txt -- restore from staged area to untracked
git checkout --filename.txt -- you can go to previous version (rollback) or commit /dicard all changes in file
git checkout -f rollback all the files to last commit or last version

Alias set 
git config --global alias.st(your alias) status(actual command)
eg :- git config --global alias.unstage 'restore --staged --' --> git unstage file.txt

Branching:-
diverging fromt the main branch.
lightwighth movable pointer.
Why branching is required.

Create branches
HEAD --> it is a pointer which shows the latest comment
git branch -- to check current branch 
git branch -v  branch and last commit


git branch develop  -- to create branch
*branchName is the current or active branch

change to different branch
git checkout branchname --> change the branch
git checkout -b branchname --> create and move to branch immediately
git log --oneline --graph --all --- show all branches in graph format 
git log --oneline -- show all branches and logs


in case when you have cloned the repository and you wanted to switch to another branch then default of the available remote branches which you can able to see using gti branch -a please use below .

to switch to remote branch as a local branch, you need to create a local tracking branch for it. Here's how:
syntax :- git checkout -b local-name origin/remote-name

eg:-
git checkout -b secret_removal origin/secret_removal
This does two things:

Creates a local branch called secret_removal
Sets it to track the remote branch origin/secret_removal
So now youâ€™re on a proper local branch, and you can safely commit, push, etc.


Shortcut (since Git 2.23+)
git switch -c secret_removal --track origin/secret_removal

Or if Git is able to figure it out automatically:
git switch secret_removal



Delete the branch
git branch -d branchname
git branch -D branchName --forcefull

Merge the branch 
git merge branchname --> first go to the branch where you want to merge and use the command

3way merging
* you have one common ancestor and both branches will get meged after that .

merge conflict 
resolve the conflict and then add the file and commit it 

Rebasing**
rebasing means deleting the commits from other branch and putting it at the end .

for this you need to go to the branch from where you need to do the rebase to branch on which you need to do the rebase.
Eg:- git checkout experiment
git rebase develop
advantages of rebasing 
rebasing makes the log history looks linear and clearer , mainly use it in opensource projects
** when not using rebasing
do not rebase commits that exists outside your repository and that people may have based work on .
because when you rebase stuff you are abandoning existing commits and creating new ones that are similar but different
if some other collaborator working with you and created an branch based on the commit of one of your change , dont rebase

Merge Vs rebase
commit history is a record of what actually happened  or story of how your project was made

Merge -- keeps records of all the thing

rebase -- clear commits looks linears .  **only rebase in local branches dont do it in remote.

GIT
for creating and pushing the new and existing project follow github 

git pull --to pull the updates from remote
git push -- to push to remote
git remote -- to check the remote 
git remote -v -- > to check the remote pull and fetch 

origin is the github url --> https://github.com/yourrepo.git
git push -u(upstream) origin master --git push -U origin master

git remote add my-remote https://github.com/yourrepo.git

Clone :- 
Git clone repository(https)

PushlocalcodetoGit
git remote add origin https://github.com/nikhilvyas12/sprintbootsamplearch.git
git branch -M master
git push -u origin master


Git fetch
if we use git fetch it just fetch from the remote to that local git and not in local git repo after using it you need to use git merge to get the updated
code /data into your working directory

Git Pull = git fetch +git merge
it does both jobs using single command git pull and git merge automatically 

Forking :-
if you want to provide open contribution you can fork any other repository work on it and provide the Pull request or merge request to owner 

Github Issues 
you can raise the issues and label them in github in open contributions .

Upstream
upstream is the repository of the owner and maintainer .
you can just fetch from the upstream branch (forked repository)

GIthub Pages
you can host static website or only frontend website using github pages.

shot the commits 
git show commitID

Stashing
you can save your progress using stashing before switching to other repository , stash works in a stack so we can go to perticualr stash using array
git stash 

git stash apply stash@{0} -- apply perticualr stash

git statsh drop statsh@{0} --  it drop the stash 

git stash clear -- clears all at once

Git statsh list -- yo can list the stashes


Deleate all changes (clean )
git clean -f -d  -- forcefully deleteing all directory and subdirectory used when you have done lot of changes 

Changing Commit message 
git commit --amend    --> you can make changes in last latest commit using this , it will open the vim editor after changing you can do th write and quit . esc+:+wq

changing commit content
make changes in the workng directory 
add files to the staging area
run the aamend command  --> git commit --amend

Rewriting history
travel to any commit in past -- git checkout commitID

if you want to create an branch using old commits - git switch -c {newBranchName}

git switch -   --> comeback to the head or same point .

if you want to come to the master or other branch from the old just use checkout -- git checkout master


(Dangerous commands)
Revert Commit 
you can undo the change you have done for perticular commit with commit ID 
to check the changes :- git show {CommitID}
command :- git rever {CommitID}

Reset Command
delete all the commit from the given commit ID onwards

git reset --soft commitID it is default flag you can just use it like  :- git reset commitID -- it give you the second chance it ask you by putting the updated files in uncommits 
git clean -f -d

git reset -hard commitid  -- it deletes the  commiti, it is mostly use to delete the recent commits .


git cherry-pick commitID  -- one 1 commit and put it on another command , take the changes from specific comit and put on the branch .


check configuration
git config --list








